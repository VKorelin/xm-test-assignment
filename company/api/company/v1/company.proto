syntax = "proto3";

import "google/protobuf/empty.proto";
import "validate/validate.proto";

package xm.api.company.v1;

option go_package = "xm/company/internal/pkg/api/company/v1;company";

service CompanyService {
    rpc Get(GetCompanyRequest) returns (GetCompanyResponse) { }
    rpc Patch(PatchCompanyRequest) returns (google.protobuf.Empty) { }
    rpc Delete(DeleteCompanyRequest) returns (google.protobuf.Empty) { }
    rpc Create(CreateCompanyRequest) returns (CreateCompanyResponse) { }
}

message GetCompanyRequest {
    string company_id = 1 [(validate.rules).string = {uuid: true}];
}

message GetCompanyResponse {
    Company company = 1;
}

message PatchCompanyRequest {
    Company company = 1 [(validate.rules).message = {required: true}];
}

message DeleteCompanyRequest {
    string company_id = 1 [(validate.rules).string = {uuid: true}];
}

message CreateCompanyRequest {
    string name = 1 [(validate.rules).string = {min_len: 1, max_len: 15}];
    string description = 2 [(validate.rules).string = {max_len: 3000}];
    uint32 amount_of_employees = 3 [(validate.rules).uint32.gt = 0];
    bool registered = 4;
    CompanyType type = 5 [(validate.rules).enum = {defined_only: true}];
}

message CreateCompanyResponse {
    Company company = 1;
}

message Company {
    string id = 1 [(validate.rules).string = {uuid: true}];
    string name = 2 [(validate.rules).string = {min_len: 1, max_len: 15}];
    string description = 3 [(validate.rules).string = {max_len: 3000}];
    uint32 amount_of_employees = 4 [(validate.rules).uint32.gt = 0];
    bool registered = 5;
    CompanyType type = 6 [(validate.rules).enum = {defined_only: true}];
}

enum CompanyType {
    Corporations = 0;
	NonProfit = 1;
	Cooperative = 2;
	SoleProprietorship = 3;
}
